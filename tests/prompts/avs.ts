export const STAGE1_TEST_PROMPT1 = `
Help me refine my AVS idea. My idea is for an AVS that generates cat images, then have a group of operators verify whether the likelihood of that operator being a cat image greater than 90%
`;

export const STAGE2_TEST_PROMPT1 = `
Help me generate a design tech spec for my AVS idea. My idea is for an AVS that generates cat images, then have a group of operators verify whether the likelihood of that operator being a cat image greater than 90%
`;


export const STAGE3_TEST_PROMPT1 = `
Help me generate a prototype implementation for my AVS using the following design tech spec

CatLLM: AI Cat Image Generation and Validation AVS - Technical Design Specification

1. AVS Purpose and Scope

CatLLM is a decentralized AI cat image generation platform that leverages EigenLayer's security model to ensure high-quality, reliable image generation. The primary use case is to provide users with unique, high-quality cat images generated by AI while ensuring these images meet quality standards through a decentralized validation mechanism.

The AVS adds value through:
Decentralization: Distributing both generation and validation across multiple independent operators
Quality Assurance: Implementing a consensus-based validation system that ensures consistent quality
Censorship Resistance: Preventing any single entity from controlling what images can be generated
Economic Incentives: Creating aligned incentives for both generators and validators to maintain high standards

2. Designing the Operator "Work" (aka task)

Generator Operator Task Definition

Primary Task: A single designated operator will run an LLM with image generation capabilities to produce cat images
Triggering Mechanism: Tasks can be triggered through user requests or scheduled batch generation
Image Parameters:
Optional user-specified attributes (e.g., "tabby cat," "cat with hat," "sleeping cat")

Input and Output

Input Format:
Task ID: Unique identifier for each generation task
Prompt: Text description of the desired cat image (optional)
Timestamp: When the task was created
Optional parameters: style preferences, specific attributes, etc.

Output Format:
Task ID: Matching the input task ID
Image Data: Base64-encoded PNG image
Generation Metadata: LLM version, generation parameters, timestamp
Cryptographic Signature: ECDSA signature of the generator operator to verify authenticity

Technical Implementation
The generator operator will:
1. Poll the CatLLM service manager contract for new image generation tasks
2. Process each task by feeding the prompt to an LLM with image generation capabilities
3. Post the resulting image and metadata back to the service manager
4. Sign the submission with their EigenLayer registered operator key

3. Decentralized Validation

Validation Mechanism

Validator Selection: At least two validators are randomly selected from the validator operator pool for each generated image
Validation Criteria:
Image Quality: Evaluating resolution, clarity, and visual coherence
Cat Recognition: Determining whether the image clearly depicts a cat
Prompt Adherence: How well the image matches any provided specifications/attributes
Uniqueness: Comparing against previously generated images to prevent duplication

Validation Process:
1. Each validator uses their own LLM to analyze the generated image
2. The LLM produces an accuracy rating between 0% and 100%
3. The validator submits this rating along with a brief explanation
4. All ratings are recorded on-chain through the service manager contract

Consensus Rules

Rating Aggregation: The arithmetic mean of all validator ratings is calculated
Minimum Validators: A minimum of two validators must submit ratings for consensus to be valid
Validation Period: Validators have a maximum time window of 30 minutes to submit their ratings
Late Submissions: Ratings submitted after the validation period are not included in the consensus
Generator Reward Threshold: Generator is rewarded if the average accuracy rating exceeds 90%

Technical Implementation
The validation workflow will:
1. Automatically assign validator operators to new image submissions
2. Provide validators with access to the image and any prompt information
3. Accept validator submissions containing percentage ratings
4. Calculate consensus rating once the validation period ends or all assigned validators have submitted
5. Record final ratings and trigger reward distribution based on outcome

4. Rewards Distribution for Successful Behaviors

Reward Conditions

Validator Rewards:
Condition: Submit a valid rating within the validation period
Amount: Fixed amount per validation performed
Required for Payment: Rating must include both a percentage and brief explanation

Generator Rewards:
Condition: Average validator rating exceeds 90%
Amount: Higher than validator rewards to incentivize quality
Additional Bonus: Incremental bonus for exceptionally high ratings (>95%)


Malicious Activity Definition

Generator Malicious Behaviors:
Submitting non-cat images
Repeatedly submitting low-quality images
Submitting duplicate or plagiarized images
Submitting inappropriate or harmful content

Validator Malicious Behaviors:
Rating collusion (consistently giving similar ratings to specific generators)
Failing to provide ratings within the validation period
Submitting ratings without proper LLM analysis
Providing ratings that dramatically differ from consensus without justification

Punitive Actions

Reward Withholding:
Generator: No rewards for images with average ratings below 90%
Validators: No rewards for missed validations or invalid submissions

Operator Ejection:
Generator: Ejected after three consecutive low-quality submissions (<50% average rating)
Validators: Ejected after five consecutive missed validations or detected collusion
Ejection Duration: Minimum 7-day cooling period before re-registration possible

`