[
  {
    "path": "contracts/src/CatImageServiceManager.sol",
    "summary": "Implements the Cat Image Service Manager contract where tasks for generating and verifying cat images are managed.",
    "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\nimport {ECDSAServiceManagerBase} from \"@eigenlayer-middleware/src/unaudited/ECDSAServiceManagerBase.sol\";\nimport {IServiceManager} from \"@eigenlayer-middleware/src/interfaces/IServiceManager.sol\";\nimport {IImageServiceManager} from \"./IImageServiceManager.sol\";\n\ncontract CatImageServiceManager is ECDSAServiceManagerBase, IImageServiceManager {\n    uint32 public latestTaskNum;\n    mapping(uint32 => Task) public allTasks;\n    mapping(uint32 => address[]) public taskVerifiers;\n\n    struct Task {\n        string catImageUrl;\n        uint32 createdBlock;\n        uint32 verificationThreshold;\n        uint32 verifiedCount;\n    }\n\n    constructor(\n        address _avsDirectory,\n        address _stakeRegistry,\n        address _rewardsCoordinator,\n        address _delegationManager,\n        address _allocationManager\n    )\n        ECDSAServiceManagerBase(\n            _avsDirectory,\n            _stakeRegistry,\n            _rewardsCoordinator,\n            _delegationManager,\n            _allocationManager\n        ) {}\n\n    function createCatImageTask(string memory imageUrl) external returns (Task memory) {\n        Task memory newTask = Task(imageUrl, uint32(block.number), 90, 0);\n        allTasks[latestTaskNum] = newTask;\n        emit NewTaskCreated(latestTaskNum, newTask);\n        latestTaskNum++;\n        return newTask;\n    }\n\n    function verifyCatImage(uint32 taskIndex, bool isCatImage) external {\n        require(taskIndex < latestTaskNum, \"Task does not exist\");\n        Task storage task = allTasks[taskIndex];\n        taskVerifiers[taskIndex].push(msg.sender);\n\n        if (isCatImage) {\n            task.verifiedCount++;\n        }\n\n        if (task.verifiedCount >= task.verificationThreshold) {\n            emit TaskVerified(taskIndex, task);\n        }\n    }\n\n    // Event emitted when a new task is created\n    event NewTaskCreated(uint32 indexed taskIndex, Task task);\n    // Event emitted when a task is verified\n    event TaskVerified(uint32 indexed taskIndex, Task task);\n}\n"
  },
  {
    "path": "contracts/src/IImageServiceManager.sol",
    "summary": "Interface for Cat Image Service Manager contract outlining the core functionalities.",
    "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\ninterface IImageServiceManager {\n    struct Task {\n        string catImageUrl;\n        uint32 createdBlock;\n        uint32 verificationThreshold;\n        uint32 verifiedCount;\n    }\n\n    function createCatImageTask(string memory imageUrl) external returns (Task memory);\n    function verifyCatImage(uint32 taskIndex, bool isCatImage) external;\n    event NewTaskCreated(uint32 indexed taskIndex, Task task);\n    event TaskVerified(uint32 indexed taskIndex, Task task);\n}\n"
  },
  {
    "path": "contracts/test/CatImageServiceManager.t.sol",
    "summary": "Unit tests for the Cat Image Service Manager contract to ensure tasks are created and verified correctly.",
    "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.12;\n\nimport {CatImageServiceManager} from \"../src/CatImageServiceManager.sol\";\nimport {Test} from \"forge-std/Test.sol\";\n\ncontract CatImageServiceManagerTest is Test {\n    CatImageServiceManager serviceManager;\n\n    function setUp() public {\n        serviceManager = new CatImageServiceManager(\n            0x1234567890123456789012345678901234567890,\n            0x1234567890123456789012345678901234567890,\n            0x1234567890123456789012345678901234567890,\n            0x1234567890123456789012345678901234567890,\n            0x1234567890123456789012345678901234567890\n        );\n    }\n\n    function testCreateCatImageTask() public {\n        string memory imageUrl = \"https://example.com/cat.jpg\";\n        CatImageServiceManager.Task memory task = serviceManager.createCatImageTask(imageUrl);\n        assertEq(task.catImageUrl, imageUrl, \"Cat image URL should match\");\n    }\n\n    function testVerifyCatImage() public {\n        string memory imageUrl = \"https://example.com/cat.jpg\";\n        serviceManager.createCatImageTask(imageUrl);\n        serviceManager.verifyCatImage(0, true);\n        assertEq(serviceManager.allTasks(0).verifiedCount, 1, \"Verified count should increment\");\n    }\n}\n"
  },
  {
    "path": "contracts/config/hello-world/31337.json",
    "summary": "Configuration for deploying the Cat Image Service on a test network.",
    "content": "{\n  \"addresses\": {\n    \"rewardsOwner\": \"0xYourRewardsOwnerAddress\",\n    \"rewardsInitiator\": \"0xYourRewardsInitiatorAddress\"\n  },\n  \"keys\": {\n    \"rewardsOwner\": \"0xYourRewardsOwnerKey\",\n    \"rewardsInitiator\": \"0xYourRewardsInitiatorKey\"\n  }\n}\n"
  },
  {
    "path": "README.md",
    "summary": "Updated README file to include information about the Cat Image Service AVS.",
    "content": "# Cat Image AVS\n\nThis project showcases a simple AVS that generates cat images and allows a group of Operators to verify whether the likelihood of an image meeting a specified threshold (90%) as being a cat image.\n\n## Overview\n1. **Task Creation**: Generate a task for creating a new cat image.\n2. **Verification**: Have registered Operators verify the image and submit their assessments.\n3. **Consensus**: Once enough verifications have been received, the task is marked as verified.\n\n## Local Development\n- Follow instructions for setting up the environment and deploying contracts as documented.\n\n## Deploying\nTo deploy the Cat Image AVS:\n1. Setup the configuration files in `contracts/config/hello-world/31337.json`.\n2. Build and deploy the contracts using the provided scripts.\n3. Interact with the service using the deployed `CatImageServiceManager`.\n\n## Contributing\nContributions are welcome! Please create an issue or a pull request for any enhancements or bug fixes.\n"
  }
]


